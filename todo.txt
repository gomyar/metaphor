
Idea:
 - one service wants to make a call to another service
   it sends a request for information about the call it wishes to make ( what does a linguistic abstraction look like ) (what does intent look like)
   the second service responds with metadata on the call (whether it be REST resource url / required params / dependent resources or a link to an HTML UI)


Todo:

 - mutations:
   - check all field alters (int -> str,float,collection?)
   - add field_alter to UI
     - add as part of field rename - dont need this
   - add default to field_alter - or this
   - perform all updates in order - done
     - field_alter occurs after field_rename
     - test 

 - mutation add indexes

 - schema: groups/grants as schema
    - add grant view
    - allow linked paths

 - schema: index rebuild on mutation
   - "global unique", "local unique"
   - multiple users -> single identity (possibly don't need globally unique usernames)

 - api: multiple roots, multiple schemas

 - mutations: estimate effects
 - mutations: add moves / alterations etc

 - remove canonical url

 - api: enable oauth

 - schema: restrict field values based on calc

 - lrparse: finalize railway shunt
    - brackets in the Conditions ( A | ( B & C ) )

 - schema: resource versioning: accessible by ctags

 - test: add test area
    - add test root(s)


Bugs:
 - Bug: deleting calc field still exists (and errors after update)
 - Bug: Refresh buton under /ego resources doesn't work (client tries to use canonical url)
 - Bug: Empty lists do not report 403
 - Bug: calculated resource collections are not covered by authentication check
 - bug: validate types for functions 
 - bug: reverse aggregations are run against the altered resource, but may not be applicable to it. return the resource type for each reverse aggregation in the list.



