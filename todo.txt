
 - bug: calcs which evaluate to a single link id throw an error

 - restrict allowed field names
 - proper http error codes (400 404 etc)
 - cascading delete
 - delete spec field, update all resources
   - throw error if field used in calc
 - rename field - maybe - would also have to update any calcs using the field

 - update entry in resource (updateid, timestamp etc)
   - sync updates across cluster using redis

 - adding invalid calc field raises exception
 - adding calc field with cyclic dependency raises error


Permissioning:
 - Users
   - get a /me endpoint
   - contain group memberships
 - Groups
   - Resource collection fields also contain a list of groups which can read
     - And a separate collection for groups which can create
   - A single Resource has a list of groups for edit
   - Requests are filtered by the list of read groups in a collection
   - Posts are allowed based on the list of post groups in a collection
   - Put requests are allowed base on the list of put groups in a collection

Pagination
 - do this

Expand by get param:
 - aggregate calls on all GET requests, which optional expand - done
 - expand through links honours the permissions (groups) of the linked resource
 - add nested expand (maybe)

Nested fields
 - handy for smaller, reused resources (Point, currency, x, y etc)
 - dot notation within calcs
 - may be possible to cheat and create long structured field names (i.e. point__x, point__y etc)


Move resource:
 - patch against _parent_id and _parent_field
 - works for links and collections


Small todos:
 - bugs:
   - if an error occurs creating a field, the field is still added
 - js popups:
   - clear popup before "create" or "new" 
   - allow pressing Enter key to submit
 - schema editor
   - add delete for fields
   - add delete for resources
     - possibly need some sort of versioning warning
     - possibly add "deprecated" bool to fields / resources
   - filter own spec from "add field" -> "collection" type dropdown
   - add date field type
   - add new calc functions:
     - now()
   - add < and > and = as operators (like + or -) which resolve to boolean values (not just used in filter expressions)

   - need to be able to experimentally create schemas without applying them immediately
     - an edited schema could be called a "patch" on a given schema "version" 
       - could highlight mutators required to apply patch

 - calcs
   - add 

 - add orderedlist type (possibly ordered link list)
   - complicated, may involve linked list impl with $graphLookup aggregation
   - pay attention to atomic changes to items in the list, whether adding / deleting / reordering
     - maybe "PATCH" with _order field? for reordering call


Update algorithmL

 - create updater for each update spawned by a request (single field update or single object creation/deletion)
   - also for calc updates which may affect multiple objects
   - fields: update_id, spec_name field_name, running_at
 - run updater: aggregate calc dependencies, retrieve cursor to resource ids
 - iterate each resource:
 - for each resource, atomically read fields and mark as "being updated by"-> this update_id
   - if "being_updated_by" field is not null, then back off
 - calculate result:
 - attempt save:
   - if "being_updated_by" has changed, back off 



basic REST:
 - GET by url:
   - nested resource (collection/id/resource.field)
   - aggregated resources (collection/resources   &&   collection/resources/fields) - use calc parser
   - canonical url "self: http://collection/ID"
   - expansion of resources "expand=employee.section.category"
   - field filters
   - ordering
   - pagination
 - POST / PUT
   - create resource (collection/   {'name': 'etc'}
   - dependent updates scheduled (for calcs)
 - PATCH / DELETE
   - update resource (collection/ID
   - dependent updates scheduled (for calcs)


schema:
 - resource specs creation / edit
 - resource:
   - basic fields: str int float bool
   - calc fields:
     - basic calc types: str int float bool
     - collections of resources (cached by id)
   - link fields:
     - link to other resource (many to one)
   - collection fields:
     - parent relationship with target resource (one to one)
     - reverse linked through "parent_resource_field" field name (will return single parent resource)
   - linkcollection fields:
     - link relationship with target resource (many to one)
     - reverse linked through "link_resource_field" field name (will return list of linked resources)


calc fields:
 - parsed from "self" or "root" - aggregates 


updates
 - on POST / PATCH / DELETE / PUT
   - single / distributed update
 - atomic-ish recoverable idempotent updates
 - update request may wait on result of update, or leave running in background
 - some calc types may specific to be run in background
 - ability to attach to ongoing updates, get notifications of running updates


permissions:
 - root driven permissions
 - a user has access through a group - groups are assigned permissions to resources and all children
   - linked resources are not included - the canonical parent for a linked resource will need to be permissioned independently
 - permissions do not apply to or affect calcs


mutating the schema:
 - schemas are versions by uuid - major.minor.micro
   - breaking changes alter the major+minor+micro uuid
   - additive changes alter the minor+micro uuid
   - calc changes alter the micro uuid
 - should be possible to apply any change to a schema, and to alert for data deletion on a major change

 - may mark each resource by the hash of the schema used to create / last update it. On load, if the has is different from the current schema, reload the schema
 - might also have to mutate the just-loaded resource on demand
