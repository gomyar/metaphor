#!/usr/bin/env python3

import os
from datetime import datetime
import getpass
import argparse
from pymongo import MongoClient
from pymongo.database import Database
from metaphor.updater import Updater
from metaphor.schema_factory import SchemaFactory


def run_init_schema(mongohost, mongodb):
    client = MongoClient(mongohost)
    db = client[mongodb]
    if list(db.list_collections()):
        print("The given Database is not empty. Please run init_schema against a blank Database")
    else:
        factory = SchemaFactory(db)
        factory.create_identity_collection()
        factory.create_usergroup_collection()
        schema = factory.create_schema()
        print("Schema created in database '%s'" % db.name)


def run_create_superuser(mongohost, mongodb):
    client = MongoClient(mongohost)
    db = client[mongodb]
    email = input("Input email: ")
    password = getpass.getpass("Input password: ")
    if email and password:
        if db.resource_user.find_one({'email': email}):
            print("User %s already exists" % email)
        else:
            schema_factory = SchemaFactory(db)
            schema = schema_factory.load_current_schema()

            updater = Updater(schema)
            updater.create_basic_user(email, password, ['admin'], True)

            print("User %s created" % email)


def run_create_user(mongohost, mongodb):
    client = MongoClient(mongohost)
    db = client[mongodb]
    email = input("Input email: ")
    password = getpass.getpass("Input password: ")
    groups = input("Input groups: ")
    if email and password:
        if db.resource_user.find_one({'email': email}):
            print("User %s already exists" % email)
        else:
            schema_factory = SchemaFactory(db)
            schema = schema_factory.load_current_schema()

            groups = groups.strip().split()
            groups = [g.strip() for f in groups if g.strip()]
            for group_name in groups:
                if group_name not in schema.groups:
                    print(f"Error: No such group: {group_name}")
                    return

            updater = Updater(schema)
            updater.create_basic_user(email, password, groups)

            print("User %s created" % email)


def run_delete_user(mongohost, mongodb):
    client = MongoClient(mongohost)
    db = client[mongodb]
    email = input("Input email: ")
    if email:
        if db.resource_user.find_one({'email': email}):
            schema_factory = SchemaFactory(db)
            schema = schema_factory.load_current_schema()

            updater = Updater(schema)

            user = updater.delete_user(email)

            print("User %s deleted" % email)
        else:
            print("User %s does not exist" % email)


def run_invite_user(mongohost, mongodb):
    client = MongoClient(mongohost)
    db = client[mongodb]
    email = input("Input email: ")
    groups = input("Input groups (comma separated): ")
    admin = input("Is admin? (y/n)")
    if email:
        groups = groups.split(',') if groups else []
        admin = admin in ['y', 'Y', 'yes']
        if db.resource_user.find_one({'email': email}):
            print("User %s already exists" % email)
        else:
            schema_factory = SchemaFactory(db)
            schema = schema_factory.load_current_schema()

            updater = Updater(schema)
            updater.create_user_resource(email, groups, admin)

            print("User %s created" % email)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Metaphor init scripts')

    parser.add_argument(
        'command', type=str,
        help='Command to run: init_schema|create_superuser|create_user|invite_user')
    parser.add_argument(
        '--mongohost', type=str,
        help='Mongo connection: mongodb://[username:password@]host[:port]')
    parser.add_argument(
        '--mongodb', type=str,
        help='Mongo database')

    args = parser.parse_args()

    commands = {
        'init_schema': run_init_schema,
        'create_superuser': run_create_superuser,
        'create_user': run_create_user,
        'delete_user': run_delete_user,
        'invite_user': run_invite_user,
    }

    default_mongoconnection = os.getenv('METAPHOR_MONGO_HOST',
                                        'mongodb://127.0.0.1:27017/admin')
    default_mongodb = os.getenv('METAPHOR_DBNAME', 'metaphor')

    commands[args.command](
        args.mongohost or default_mongoconnection,
        args.mongodb or default_mongodb)
