#!/usr/bin/env python3

import os
from datetime import datetime
import getpass
import argparse
from pymongo import MongoClient
from pymongo.database import Database
from metaphor.updater import Updater
from metaphor.schema_factory import SchemaFactory
from werkzeug.security import generate_password_hash


def run_init_schema(mongohost, mongodb):
    client = MongoClient(mongohost)
    db = client[mongodb]
    if list(db.list_collections()):
        print("The given Database is not empty. Please run init_schema against a blank Database")
    else:
        schema = SchemaFactory(db).create_schema()

        updater = Updater(schema)
        group_id = updater.create_resource('group', 'root', 'groups', None, {'name': 'admin'})

        for grant_type in ['read', 'create', 'update', 'delete']:
            updater.create_resource('grant', 'group', 'grants', group_id, {'type': grant_type, 'url': '/'})

        print("Schema created in database '%s'" % db.name)


def run_create_superuser(mongohost, mongodb):
    client = MongoClient(mongohost)
    db = client[mongodb]
    username = input("Input username: ")
    password = getpass.getpass("Input password: ")
    if username and password:
        if db.resource_user.find_one({'username': username}):
            print("User %s already exists" % username)
        else:
            schema_factory = SchemaFactory(db)
            schema = schema_factory.load_current_schema()

            updater = Updater(schema)

            user_id = updater.create_user(username, password)

            admin_group = db.resource_group.find_one({'name': 'admin'})
            updater.create_linkcollection_entry('user', user_id, 'groups', schema.encodeid(admin_group['_id']))

            print("User %s created" % username)


def run_create_user(mongohost, mongodb):
    client = MongoClient(mongohost)
    db = client[mongodb]
    username = input("Input username: ")
    password = getpass.getpass("Input password: ")
    if username and password:
        if db.resource_user.find_one({'username': username}):
            print("User %s already exists" % username)
        else:
            schema_factory = SchemaFactory(db)
            schema = schema_factory.load_current_schema()

            updater = Updater(schema)

            pw_hash = generate_password_hash(password)
            user_id = updater.create_resource('user', 'root', 'users', None, {'username': username, 'password': pw_hash, 'admin': False}, schema.read_root_grants('users'))

            print("User %s created" % username)


def run_delete_user(mongohost, mongodb):
    client = MongoClient(mongohost)
    db = client[mongodb]
    username = input("Input username: ")
    if username:
        if db.resource_user.find_one({'username': username}):
            schema_factory = SchemaFactory(db)
            schema = schema_factory.load_current_schema()

            updater = Updater(schema)

            user = updater.delete_user(username)

            print("User %s deleted" % username)
        else:
            print("User %s does not exist" % username)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Metaphor init scripts')

    parser.add_argument(
        'command', type=str,
        help='Command to run: init_schema|create_superuser|create_user')
    parser.add_argument(
        '--mongohost', type=str,
        help='Mongo connection: mongodb://[username:password@]host[:port]')
    parser.add_argument(
        '--mongodb', type=str,
        help='Mongo database')

    args = parser.parse_args()

    commands = {
        'init_schema': run_init_schema,
        'create_superuser': run_create_superuser,
        'create_user': run_create_user,
        'delete_user': run_delete_user,
    }

    default_mongoconnection = os.getenv('METAPHOR_MONGO_HOST',
                                        'mongodb://127.0.0.1:27017/admin')
    default_mongodb = os.getenv('METAPHOR_DBNAME', 'metaphor')

    commands[args.command](
        args.mongohost or default_mongoconnection,
        args.mongodb or default_mongodb)
