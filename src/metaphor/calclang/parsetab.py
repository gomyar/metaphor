
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSNAME NUMBER STRING PLUS MINUS TIMES DIVIDE EQUALS LPAREN RPAREN COMMAstatement : expressionexpression : NAME LPAREN expression RPAREN\n                  | NAME LPAREN expression COMMA expression RPAREN\n                  | NAME LPAREN expression COMMA expression COMMA expression RPAREN\n    expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : NAME'
    
_lr_action_items = {'DIVIDE':([1,2,5,6,9,14,15,16,17,18,19,20,21,23,24,26,27,],[-13,-11,-12,11,11,-9,11,-10,11,-8,11,-7,-2,11,-3,11,-4,]),'RPAREN':([1,2,5,9,14,15,16,17,18,19,20,21,23,24,26,27,],[-13,-11,-12,16,-9,21,-10,-5,-8,-6,-7,-2,24,-3,27,-4,]),'NAME':([0,4,7,8,10,11,12,13,22,25,],[1,1,1,1,1,1,1,1,1,1,]),'NUMBER':([0,4,7,8,10,11,12,13,22,25,],[2,2,2,2,2,2,2,2,2,2,]),'TIMES':([1,2,5,6,9,14,15,16,17,18,19,20,21,23,24,26,27,],[-13,-11,-12,13,13,-9,13,-10,13,-8,13,-7,-2,13,-3,13,-4,]),'PLUS':([1,2,5,6,9,14,15,16,17,18,19,20,21,23,24,26,27,],[-13,-11,-12,10,10,-9,10,-10,-5,-8,-6,-7,-2,10,-3,10,-4,]),'LPAREN':([0,1,4,7,8,10,11,12,13,22,25,],[4,8,4,4,4,4,4,4,4,4,4,]),'COMMA':([1,2,5,14,15,16,17,18,19,20,21,23,24,27,],[-13,-11,-12,-9,22,-10,-5,-8,-6,-7,-2,25,-3,-4,]),'$end':([1,2,3,5,6,14,16,17,18,19,20,21,24,27,],[-13,-11,0,-12,-1,-9,-10,-5,-8,-6,-7,-2,-3,-4,]),'MINUS':([0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,],[7,-13,-11,7,-12,12,7,7,12,7,7,7,7,-9,12,-10,-5,-8,-6,-7,-2,7,12,-3,7,12,-4,]),'STRING':([0,4,7,8,10,11,12,13,22,25,],[5,5,5,5,5,5,5,5,5,5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,4,7,8,10,11,12,13,22,25,],[6,9,14,15,17,18,19,20,23,26,]),'statement':([0,],[3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','lang.py',74),
  ('expression -> NAME LPAREN expression RPAREN','expression',4,'p_expression_function','lang.py',78),
  ('expression -> NAME LPAREN expression COMMA expression RPAREN','expression',6,'p_expression_function','lang.py',79),
  ('expression -> NAME LPAREN expression COMMA expression COMMA expression RPAREN','expression',8,'p_expression_function','lang.py',80),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','lang.py',93),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','lang.py',94),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','lang.py',95),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','lang.py',96),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','lang.py',103),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','lang.py',111),
  ('expression -> NUMBER','expression',1,'p_expression_number','lang.py',115),
  ('expression -> STRING','expression',1,'p_expression_string','lang.py',119),
  ('expression -> NAME','expression',1,'p_expression_name','lang.py',123),
]
